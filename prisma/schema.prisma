generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  telefone   String?
  name       String?   @db.VarChar(255)
  password   String    @db.VarChar(255)
  admin      Boolean   @default(false)
  avatar     String?
  enable     Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Expenses           Expenses[]
  Entrys             Entries[]
  ExpensesCategories ExpensesCategories[]
  EntryCategories    EntriesCategories[]
  Budget             BudgetsCategories[]
  GeneralBudget      GeneralBudget[]
  Savings            Savings[]

  @@map("users")
}

model Expenses {
  id               String    @id @default(uuid())
  title            String
  date             DateTime
  amount           Float
  recurrent        Boolean   @default(false)
  remind           Boolean   @default(false)
  remind_time      DateTime?
  recurrent_number Int?
  category_id      String?
  user_id          String
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime?

  User               User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ExpensesCategories ExpensesCategories? @relation(fields: [category_id], references: [id], onDelete: SetNull)

  @@map("expenses")
}

model Entries {
  id               String    @id @default(uuid())
  title            String
  date             DateTime
  amount           Float
  recurrent        Boolean   @default(false)
  recurrent_number Int?
  remind           Boolean   @default(false)
  remind_time      DateTime?
  user_id          String
  category_id      String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime?

  EntriesCategories EntriesCategories? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  User              User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("entries")
}

model ExpensesCategories {
  id         String    @id @default(uuid())
  user_id    String
  name       String
  icon       String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  Expenses          Expenses[]
  BudgetsCategories BudgetsCategories[]

  @@map("expenses_categories")
}

model EntriesCategories {
  id         String    @id @default(uuid())
  user_id    String
  name       String
  icon       String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  Entries Entries[]

  @@map("entries_categories")
}

model BudgetsCategories {
  id          String    @id @default(uuid())
  budget      Float
  user_id     String
  month       String
  category_id String?
  budget_id   String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  User               User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ExpensesCategories ExpensesCategories? @relation(fields: [category_id], references: [id], onDelete: Cascade)
  GeneralBudget      GeneralBudget?      @relation(fields: [budget_id], references: [id], onDelete: Cascade)

  @@map("budget_categories")
}

model GeneralBudget {
  id         String    @id @default(uuid())
  budget     Float
  user_id    String
  month      String
  year       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  BudgetsCategories BudgetsCategories[]

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("budget")
}

model Savings {
  id         String    @id @default(uuid())
  goal       Float
  user_id    String
  month      String?
  year       BigInt?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("savings")
}
